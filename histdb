#!/usr/bin/env lua5.4

local stdlib   = require 'posix.stdlib'
local unistd   = require 'posix.unistd'
local sys_wait = require 'posix.sys.wait'

-- XXX I'd rather have a `local obj <close> = closing(obj)`, but this'll do for now
local function closer(closee, method)
  method = method or 'close'
  return closee, setmetatable({}, {
    __close = function()
      local f = type(method) == 'string' and closee[method] or method
      return f(closee)
    end,
  })
end

local function prepare_sqliterc()
  local sqliterc = os.tmpname()

  local f <close> = assert(io.open(sqliterc, 'w'))
  f:write([[
.load lua-vtable
.output /dev/null
select lua_create_module_from_file('/home/rob/projects/histdb-redux/histdb.lua');
.output
create virtual table temp.h_debug using h(debug);
]])

  return closer(sqliterc, os.remove)
end

local function run_sqlite(db_path, sqliterc, arg)
  local sqlite3_args = {
    '-batch',
    '-init', sqliterc,
    'file://' .. db_path .. '?immutable=true',
  }
  for i = 1, #arg do
    sqlite3_args[#sqlite3_args + 1] = arg[i]
  end

  local shell_pid = unistd.getppid()

  local pid = assert(unistd.fork())
  if pid == 0 then
    stdlib.setenv('LD_LIBRARY_PATH', '/home/rob/projects/sqlite-lua-vtable/')
    unistd.execp('sqlite3', sqlite3_args)
  else
    local _, reason, exit_code = sys_wait.wait(pid)
    if exit_code ~= 0 then
      return nil, string.format('sqlite3 %s with %d', reason, exit_code), exit_code
    end
  end

  return true
end

local db_path = os.getenv 'HISTDB_PATH' or '/home/rob/.zsh_history.db'
local sqliterc, sqliterc_remover <close> = prepare_sqliterc()
local ok, err, exit_code = run_sqlite(db_path, sqliterc, arg)
if not ok then
  os.exit(exit_code)
end
