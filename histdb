#!/usr/bin/env lua5.4

local stdlib   = require 'posix.stdlib'
local unistd   = require 'posix.unistd'
local sys_wait = require 'posix.sys.wait'

-- XXX I'd rather have a `local obj <close> = closing(obj)`, but this'll do for now
local function closer(closee, method)
  method = method or 'close'
  return closee, setmetatable({}, {
    __close = function()
      local f = type(method) == 'string' and closee[method] or method
      return f(closee)
    end,
  })
end

local function blob_literal(str)
  return "X'" .. str:gsub('.', function(c)
    return string.format('%02X', string.byte(c))
  end) .. "'"
end

local function prepare_sqliterc(script_dir)
  local sqliterc = os.tmpname()

  local f <close> = assert(io.open(sqliterc, 'w'))
  f:write(string.format([[
.output /dev/null
select load_extension(%s);
select lua_create_module_from_file(%s);
.output
create virtual table temp.h_debug using h(debug);
]],
    blob_literal(script_dir .. '/lua-vtable.so'),
    blob_literal(script_dir .. '/histdb.lua')))

  return closer(sqliterc, os.remove)
end

local function run_sqlite(db_path, sqliterc, arg)
  local sqlite3_args = {
    '-batch',
    '-init', sqliterc,
    'file://' .. db_path .. '?immutable=true',
  }
  for i = 1, #arg do
    sqlite3_args[#sqlite3_args + 1] = arg[i]
  end

  local pid = assert(unistd.fork())
  if pid == 0 then
    unistd.execp('sqlite3', sqlite3_args)
  else
    local _, reason, exit_code = sys_wait.wait(pid)
    if exit_code ~= 0 then
      return nil, string.format('sqlite3 %s with %d', reason, exit_code)
    end
  end

  return true
end

local script_dir = arg[0]:match('(.*/)' ) or '.'

local db_path = os.getenv 'HISTDB_PATH' or (os.getenv 'HOME' .. '/.zsh_history.db')
local sqliterc, sqliterc_remover <close> = prepare_sqliterc(script_dir)
local ok, err, exit_code = run_sqlite(db_path, sqliterc, arg)
if not ok then
  io.stderr:write(err .. '\n')
  os.exit(exit_code)
end
